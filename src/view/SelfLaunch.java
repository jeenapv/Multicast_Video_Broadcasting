/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SelfLaunch.java
 *
 * Created on Sep 25, 2016, 10:01:15 AM
 */
package view;

import db.Dbcon;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.sql.ResultSet;
import java.util.Enumeration;

/**
 *
 * @author kakes
 */
public class SelfLaunch extends javax.swing.JFrame {

    /** Creates new form SelfLaunch */
    public SelfLaunch() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        process_status = new javax.swing.JLabel();
        ip_address_text = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("LAUNCH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        process_status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        process_status.setText("Launch");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(process_status, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(203, Short.MAX_VALUE)
                        .addComponent(ip_address_text, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ip_address_text, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(process_status, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    try {
        String ipPattern = "192.168.1.";
        String ipAddress = "";
        boolean ipFound = false;
        Enumeration e = NetworkInterface.getNetworkInterfaces();
        while (e.hasMoreElements()) {
            NetworkInterface n = (NetworkInterface) e.nextElement();
            Enumeration ee = n.getInetAddresses();
            while (ee.hasMoreElements()) {
                InetAddress i = (InetAddress) ee.nextElement();
                if (i.getHostAddress().contains(ipPattern)) {
                    ipAddress = i.getHostAddress();
                    ip_address_text.setText("Your IpAdress : " + ipAddress);
                    ipFound = true;
                }
            }
        }
        if (ipFound) {
            new LaunchClientThread(ipAddress).start();
        } else {
            process_status.setText("Sorry, Could not launch because system not connected to a proper network");
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    // TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

    class LaunchClientThread extends Thread {

        String ipAddress;

        private LaunchClientThread(String ipAddress) {
            this.ipAddress = ipAddress;
        }

        public void run() {
            try {
                System.out.println("started thread");
                process_status.setText("Ip address of system found as " + ipAddress);
                holdOn();
                process_status.setText("Checking organisation with particular IP");
                holdOn();
                String qery = "select * from tbl_organization where ip_address='" + ipAddress.trim() + "'";
                System.out.println(qery);
                ResultSet select = new Dbcon().select(qery);
                if (select.next()) {
                    process_status.setText("Welcome " + select.getString("organization_name") + ". Initializing launch....");
                    holdOn();
                    String organization_id = select.getString("organization_id");

                    ResultSet rs = new Dbcon().select("select * from organisation_hotline where organisation_id=" + organization_id.trim());
                    try {
                        if (rs.next()) {
                            // already there , check if offline or online
                            String status_code = rs.getString("status_code");
                            if (status_code.trim().equals("2")) {
                                // user is offline
                                int updated = new Dbcon().update("update organisation_hotline set status_code=1 where organisation_id=" + organization_id);
                                if (updated > 0) {
                                    // launch organisation listner
                                    process_status.setText("Lanching now...");
                                    holdOn();
                                    OrganisationClient organisationClient = new OrganisationClient(organization_id);
                                    organisationClient.setVisible(true);
                                } else {
                                    process_status.setText("Could not launch, please try again later");
                                    holdOn();
                                }
                            } else {
                                process_status.setText("Organisation in already active");
                                holdOn();
                            }
                        } else {
                            // not there yet, add it
                            int insert = new Dbcon().insert("insert into organisation_hotline (organisation_id,status_code) values (" + organization_id + " ,1)");
                            if (insert > 0) {
                                // launch organisation listner
                                OrganisationClient organisationClient = new OrganisationClient(organization_id);
                                organisationClient.setVisible(true);
                            } else {
                                process_status.setText("Could not launch, please try again later");
                                holdOn();
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    process_status.setText("Launch failed ,Organisation with this IP address not found");
                }


            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void holdOn() throws Exception {
        Thread.sleep(1000);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelfLaunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelfLaunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelfLaunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelfLaunch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new SelfLaunch().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ip_address_text;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel process_status;
    // End of variables declaration//GEN-END:variables
}
